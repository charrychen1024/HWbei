cost = c(0.1,1,5,10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
best.perf <- 0
fbest.perf <- 0
multiphenos.rs.2.temp <- multiphenos.rs.2
for (j in 1:23) {
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(ill~.,data = train)
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$ill)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
}
best.perf <- 0
fbest.perf <- 0
multiphenos.rs.2.temp <- multiphenos.rs.2
for (j in 1:23) {
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train)
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$ill)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
}
best.perf <- 0
fbest.perf <- 0
multiphenos.rs.2.temp <- multiphenos.rs.2
for (j in 1:23) {
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train)
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$ill)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
}
multiphenos.rs.2.temp <- multiphenos.rs.2
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train)
modelpred <- predict(model,test)
sum(modelpred != test$ill)/nrow(test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
sum(modelpred != test$kind)/nrow(test)
best.perf <- 0
fbest.perf <- 0
multiphenos.rs.2.temp <- multiphenos.rs.2
for (j in 1:23) {
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train)
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
}
j <- 1
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train)
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
best.perf <- 0
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train[,-(i+1)])
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train[,-(i+1)])
multiphenos.rs.2.temp <- multiphenos.rs.2
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
multiphenos.rs.2.temp <- multiphenos.rs.2
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train[,-(i+1)])
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
min(best.perf)
order(best.perf)[1]
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
j <- 2
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train[,-(i+1)])
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
min(best.perf)
fbest.perf[j] <- min(best.perf)
order(best.perf)[1]
best.perf <- 0
fbest.perf <- 0
multiphenos.rs.2.temp <- multiphenos.rs.2
for (j in 1:23) {
for (i in 1:(24-j)) {
#tune.res <- tune(svm,kind~.,data = multiphenos.rs.2.temp[,-(i+1)],ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),cost = c(0.1,1,5,10)))
temp1 <- sample(1:500,350)
temp2 <- sample(501:1000,350)
train <- multiphenos.rs.2.temp[c(temp1,temp2),]
test <- multiphenos.rs.2.temp[-c(temp1,temp2),]
model <- svm(kind~.,data = train[,-(i+1)])
#str(model)
modelpred <- predict(model,test)
best.perf[i] <- sum(modelpred != test$kind)/nrow(test)
#multiphenos.rs.2.temp <- multiphenos.rs.2
# tune.res.summ <- summary(tune.res)
# best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]
multiphenos.rs.2.temp <- multiphenos.rs.2.temp[,-numdel+1]
best.perf <- 0
}
set.seed(1)
best.perf <- 0
for (i in 1:23) {
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2[,-(i+1)],
ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),
cost = c(0.1,1,5,10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
set.seed(1)
best.perf <- 0
for (i in 1:23) {
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2[,-(i+1)],
ranges = list(kernel = c('linear','sigmoid','polynomial'),
cost = c(1,5,10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2,
ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),
cost = c(0.1,1,5,10)))
summary(tune.res)
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2[,-(i+1)],
ranges = list(kernel = c('polynomial'),
cost = c(10)))
summary(tune.res)
set.seed(1)
best.perf <- 0
for (i in 1:23) {
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2[,-(i+1)],
ranges = list(kernel = c('polynomial'),
cost = c(10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
order(best.perf)[1]
set.seed(1)
best.perf <- 0
fbest.perf <- 0
namesdel <- 0
temp.data <- multiphenos.rs.2
for (i in 1:23) {
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2[,-(i+1)],
ranges = list(kernel = c('polynomial'),
cost = c(10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[1] <- min(best.perf)
numdel <- order(best.perf)[1]+1
namesdel[1] <- colnames(temp.data)[numdel]
temp.data <- temp.data[,-numdel]
set.seed(1)
best.perf <- 0
fbest.perf <- 0
namesdel <- 0
temp.data <- multiphenos.rs.2
for (j in 1:2) {
for (i in 1:(28-j)) {
tune.res <- tune(svm,kind~.,data = temp.data[,-(i+1)],
ranges = list(kernel = c('polynomial'),
cost = c(10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]+1
namesdel[j] <- colnames(temp.data)[numdel]
temp.data <- temp.data[,-numdel]
}
fbest.perf
namesdel
set.seed(1)
best.perf <- 0
fbest.perf <- 0
namesdel <- 0
temp.data <- multiphenos.rs.2
for (j in 1:27) {
for (i in 1:(28-j)) {
tune.res <- tune(svm,kind~.,data = temp.data[,-(i+1)],
ranges = list(kernel = c('polynomial'),
cost = c(10)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]+1
namesdel[j] <- colnames(temp.data)[numdel]
temp.data <- temp.data[,-numdel]
}
fbest.perf
multi_phenos <- read.table('multi_phenos_new.txt')
multi_phenos <- as.data.frame(lapply(multi_phenos, as.factor))
str(multi_phenos)
set.seed(1)
phenos.hclust <- hclust(d = dist(multi_phenos,method = 'euclidean'))
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.1,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 2.8,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 2.9,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 2.95,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.05,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, ,hang = 0.5, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.05,col = 'red',lwd = 2)
dev.new()
plot(phenos.hclust, ,hang = 0, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.05,col = 'red',lwd = 2)
set.seed(1)
phenos.kmeans <- kmeans(multi_phenos,centers = 6)
str(phenos.kmeans)
kind <- phenos.kmeans$cluster
table(kind)
multiphenos.rs <- genotypeNumber.fsel[,-1]
multiphenos.rs <- data.frame(kind,multiphenos.rs)
multiphenos.rs$kind <- as.factor(multiphenos.rs$kind)
set.seed(1)
model <- randomForest(kind~.,data = multiphenos.rs,importance = T,ntree = 600)
impor <- model$importance
MDG <- data.frame(rs = colnames(multiphenos.rs)[2:871],MeanDecreaseGini = impor[,8])
MDG$rs <- as.character(MDG$rs)
length(which(MDG[,2] >= 1.2))
length(which(MDG[,2] >= 1.3))
length(which(MDG[,2] >= 1.25))
length(which(MDG[,2] >= 1.28))
length(which(MDG[,2] >= 1.23))
length(which(MDG[,2] >= 1.26))
length(which(MDG[,2] >= 1.25))
length(which(MDG[,2] >= 1.2))
order(MDG[,2],decreasing = T)[1:28]
write.csv(impor,file = './doc/MeanDecreaseGine5.csv')
dev.new()
plot(x = 1:nrow(MDG),y = MDG$MeanDecreaseGini,pch = 1,xaxt = 'n',xlab = '位点',ylab = 'MDG',main = '位点MeanDecreaseGini')
axis(side = 1,at = 1:nrow(MDG))
abline(h = 1,col = 'red',lwd = 2)
#text(x = which.max(MDG[,2]) + 1,y = MDG['rs2273298',2]-0.1,labels = 'rs2273298' )
text(x = c(order(MDG[,2],decreasing = T)[1:28]),y = c(MDG[order(MDG[,2],decreasing = T)[1:28],2]-0.05),
labels = c(MDG[order(MDG[,2],decreasing = T)[1:28],1]))
points(x = c(order(MDG[,2],decreasing = T)[1:28]), y = c(MDG[order(MDG[,2],decreasing = T)[1:28],2]),col = 'red')
dev.new()
plot(x = 1:nrow(MDG),y = MDG$MeanDecreaseGini,pch = 1,xaxt = 'n',xlab = '位点',ylab = 'MDG',main = '位点MeanDecreaseGini')
axis(side = 1,at = 1:nrow(MDG))
abline(h = 1.2,col = 'red',lwd = 2)
#text(x = which.max(MDG[,2]) + 1,y = MDG['rs2273298',2]-0.1,labels = 'rs2273298' )
text(x = c(order(MDG[,2],decreasing = T)[1:28]),y = c(MDG[order(MDG[,2],decreasing = T)[1:28],2]-0.05),
labels = c(MDG[order(MDG[,2],decreasing = T)[1:28],1]))
points(x = c(order(MDG[,2],decreasing = T)[1:28]), y = c(MDG[order(MDG[,2],decreasing = T)[1:28],2]),col = 'red')
plot(phenos.hclust, hang = 0, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
dev.new()
plot(phenos.hclust, hang = 0, labels = F,main = '相关症状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.05,col = 'red',lwd = 2)
multiphenos.rs.2 <- multiphenos.rs[,c(1,order(MDG[,2],decreasing = T)[1:28]+1)]
?hclust
set.seed(1)
tune.res <- tune(svm,kind~.,data = multiphenos.rs.2,
ranges = list(kernel = c('radial','linear','sigmoid','polynomial'),
cost = c(0.1,1,5,10)))
tune.res.summ <- summary(tune.res)
dev.new()
plot(phenos.hclust, hang = 0, labels = F,main = '相关性状层次聚类', xlab = '样本', ylab = '高度')
abline( h = 3.05,col = 'red',lwd = 2)
tune.res.summ
set.seed(1)
best.perf <- 0
fbest.perf <- 0
namesdel <- 0
temp.data <- multiphenos.rs.2
for (j in 1:28) {
for (i in 1:(29-j)) {
tune.res <- tune(svm,kind~.,data = temp.data[,-(i+1)],
ranges = list(kernel = c('sigmoid'),
cost = c(5)))
#multiphenos.rs.2.temp <- multiphenos.rs.2
tune.res.summ <- summary(tune.res)
best.perf[i] <- tune.res.summ$best.performance
}
fbest.perf[j] <- min(best.perf)
numdel <- order(best.perf)[1]+1
namesdel[j] <- colnames(temp.data)[numdel]
temp.data <- temp.data[,-numdel]
}
fbest.perf
namesdel
for (j in 2:28) {
rs.crosstable <- CrossTable(multiphenos.rs.2$kind,multiphenos.rs.2[,j])
#rs1.crosstable$t
#chisq.res <- list()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest2.txt',append = T)
chisq.test(tempframe)
#print(chisq.test(tempframe))
}
}
for (j in 2:28) {
rs.crosstable <- CrossTable(multiphenos.rs.2$kind,multiphenos.rs.2[,j])
#rs1.crosstable$t
#chisq.res <- list()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest2.txt',append = T)
chisq.test(tempframe)
sink()
#print(chisq.test(tempframe))
}
}
sink()
for (j in 2:28) {
rs.crosstable <- CrossTable(multiphenos.rs.2$kind,multiphenos.rs.2[,j])
#rs1.crosstable$t
#chisq.res <- list()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest2.txt',append = T)
chisq.test(tempframe)
sink()
#print(chisq.test(tempframe))
}
}
?sink()
for (j in 2:28) {
rs.crosstable <- CrossTable(multiphenos.rs.2$kind,multiphenos.rs.2[,j])
#rs1.crosstable$t
#chisq.res <- list()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest2.txt',append = T)
chisq.test(tempframe)
sink()
unlink('./doc/chiqstest2.txt')
#print(chisq.test(tempframe))
}
}
for (j in 2:10) {
rs.crosstable <- CrossTable(genotypeNumber.tsel$ill,genotypeNumber.tsel[,j])
#rs1.crosstable$t
#chisq.res <- list()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest.txt',append = T)
chisq.test(tempframe)
sink()
#print(chisq.test(tempframe))
}
}
sink(file = './doc/chiqstest.txt',append = T)
chisq.test(tempframe)
sink()
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest.txt',append = T)
chisq.test(tempframe)
sink()
#print(chisq.test(tempframe))
}
}
for (i in 1:3) {
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
#chisq.res[i] <- chisq.test(tempframe)
sink(file = './doc/chiqstest.txt',append = T)
chisq.test(tempframe)
sink()
#print(chisq.test(tempframe))
}
chisq.test(tempframe)
tempframe <- data.frame(v1 = c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]),
V2 = 500 - c(rs.crosstable$t[1,i],rs.crosstable$t[2,i]))
chisq.test(tempframe)
